class Solution {
public:
    int find(int x,vector<int>& par){
        if(par[x]==x) return par[x];
        else return par[x]=find(par[x],par);
    }
    void Union(int a,int b,vector<int>& size,vector<int>& par){
        a=find(a,par);
        b=find(b,par);
        if(a==b) return;
        if(size[a]>=size[b]){
            par[b]=a;
            size[a]+=size[b];
        }
        else{
            par[a]=b;
            size[b]+=size[a];
        }
    }
    int minMalwareSpread(vector<vector<int>>& gr, vector<int>& initial) {
        int n = gr.size();
        vector<int>size(n,1);
        vector<int>par(n);
        for(int i=0;i<n;i++) par[i]=i;

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(gr[i][j]==1) Union(i,j,size,par);
            }
        }
        sort(initial.begin(),initial.end()); // to get lowest  node first
        unordered_map<int,int>mp;
        for(int i=0;i<initial.size();i++){
            int root = find(initial[i],par);
            mp[root]++;
        }
        int maxi=-1;
        int ans =initial[0];
        for(int i=0;i<initial.size();i++){
            int root = find(initial[i],par);
            if(mp[root]==1){
                if(maxi < size[root]){
                    maxi=size[root];
                    ans = initial[i];
                }
            }
        }
        return ans;
    }
};